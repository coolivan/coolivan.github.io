{"version":3,"sources":["todo/header.js","todo/footer.js","todo/inner.js","todo/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","_useState","useState","_useState2","Object","slicedToArray","val","setVal","list","setList","react_default","a","createElement","className","type","value","placeholder","onChange","e","target","onKeyDown","keyCode","concat","toConsumableArray","id","Date","now","completed","Footer","clear","filter","item","length","uncompleted","style","display","onClick","Li","changeCompleted","remove","checkEvery","edit","changeDisplay","refInput","useRef","useEffect","current","focus","trim","checked","onDoubleClick","ref","onBlur","blur","Inner","every","map","assign","key","Todo","console","log","header","inner","forEach","footer","App","src_todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7cf26c7d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Header(props) {\r\n  let [val, setVal] = useState(\"\");\r\n  let {list,setList} = props;  \r\n\r\n\r\n    return (\r\n      <div className=\"todo-header\">\r\n        <div className=\"todo-title\">todo list</div>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            value={val}\r\n            placeholder=\"What needs to be done?\"\r\n            onChange={e => {\r\n              setVal(e.target.value);\r\n            }}\r\n            onKeyDown={e => {\r\n              if(e.keyCode === 13 && val){\r\n                setList([...list,{\r\n                  id:Date.now(),\r\n                  val,\r\n                  completed:false\r\n                }])\r\n                setVal('');\r\n              }\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Footer(props) {\r\n  let { list,clear } = props;\r\n\r\n  let completed = list.filter(item => item.completed).length;\r\n  let uncompleted = list.filter(item => !item.completed).length;\r\n\r\n  return (\r\n    <div className=\"todo-footer\">\r\n      <div style={{ display: list.length ? \"block\" : \"none\" }}>\r\n        <span>{uncompleted} left</span>\r\n        <span className=\"clear\" onClick={()=>{ clear() }}>clear {completed} completed</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nfunction Li(props) {\r\n  let { item, changeCompleted, remove, checkEvery,edit} = props;\r\n  const [display,changeDisplay] = useState(false);\r\n  const refInput = useRef(null);\r\n  useEffect(()=>{\r\n    if(display){\r\n      refInput.current.focus();\r\n    }else{\r\n        //如果为空值，则总是显示编辑框\r\n        (item.val.trim() === '') && changeDisplay(true)\r\n    }\r\n  },[display,item])\r\n\r\n  return (\r\n    <li className={item.completed ? \"done\" : \"\"}>\r\n      <div className=\"view\" style={{ display: display ? \"none\" : \"block\" }}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={item.completed}\r\n          onChange={e => {\r\n            changeCompleted(item.id, e.target.checked);\r\n            checkEvery();\r\n          }}\r\n        />\r\n        <label\r\n          onDoubleClick={e => {\r\n            changeDisplay(true);\r\n          }}\r\n        >\r\n          {item.val}\r\n        </label>\r\n        <span\r\n          onClick={() => {\r\n            remove(item.id);\r\n          }}\r\n        >\r\n          x\r\n        </span>\r\n      </div>\r\n      <div style={{ display: display ? \"block\" : \"none\" }}>\r\n        <input \r\n          type=\"text\"\r\n          value={item.val}\r\n          ref={refInput}\r\n          onChange={e=>{edit(item.id,e.target.value)}}\r\n          onBlur={()=>{changeDisplay(false)}}\r\n          onKeyDown={e=>{\r\n            if(e.keyCode === 13){\r\n              e.target.blur()\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction Inner(props) {\r\n  let {list,changeCompleted} = props;\r\n\r\n  function checkEvery() {\r\n    return list.every(item=>item.completed === true)  \r\n  }\r\n\r\n  return (\r\n    <div \r\n      className=\"todo-inner\"\r\n      style={{display:list.length?'block':'none'}}\r\n    >\r\n      <div>\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange = {(e) => {\r\n            list.map(item => changeCompleted(item.id, e.target.checked));\r\n          }}\r\n          checked={\r\n            checkEvery()  \r\n          }\r\n        />\r\n        <small>Mark all as complete</small>\r\n      </div>\r\n\r\n      <ul>\r\n        {\r\n          list.map(item=>(\r\n            <Li \r\n              key={item.id} \r\n              item={item} \r\n              {...props}\r\n              checkEvery={checkEvery}\r\n            />\r\n          ))\r\n        }\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Inner;\r\n","import React, { useState } from \"react\";\r\nimport './index.css';\r\nimport Header from \"./header\";\r\nimport Footer from \"./footer\";\r\nimport Inner from \"./inner\";\r\n\r\nfunction Todo() {\r\n    const [list,setList] = useState([{\r\n      id:1,\r\n      val:'test',\r\n      completed:true\r\n    }]);\r\n    console.log(list);\r\n\r\n    function changeCompleted(id,completed) {\r\n      list.forEach(item=>{\r\n        if(item.id === id){\r\n          item.completed = completed\r\n        }\r\n      })\r\n      setList([...list]);\r\n    }\r\n    function remove(id) {\r\n      setList(list.filter(item => item.id !== id));\r\n    }\r\n\r\n    function edit(id,val) {\r\n      list.forEach(item => {\r\n        if (item.id === id) {\r\n          item.val = val\r\n        }\r\n      });\r\n      setList([...list]);\r\n    }\r\n\r\n    function clear() {\r\n      setList(list.filter(item=>!item.completed))\r\n    }\r\n\r\n    return (\r\n      <div className=\"todo-wrap\">\r\n        <Header list={list} setList={setList}/>\r\n        <Inner \r\n          list={list} \r\n          changeCompleted={changeCompleted}\r\n          remove={remove}\r\n          edit={edit}\r\n        />\r\n        <Footer list={list} clear={clear}/>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Todo;\r\n","import React from 'react';\n\n// import State from \"./a/1.useState\";\n// import Effect from \"./a/2.useEffect\";\n// import Ref from \"./a/3.useRef\";\nimport Todo from \"./todo\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <State/> */}\n      {/* <Effect/> */}\n      {/* <Ref/> */}\n      <Todo/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}